"use strict";(self.webpackChunkkaustubh=self.webpackChunkkaustubh||[]).push([[44957],{3905:(e,r,n)=>{n.d(r,{Zo:()=>f,kt:()=>m});var o=n(67294);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function p(e,r){if(null==e)return{};var n,o,t=function(e,r){if(null==e)return{};var n,o,t={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=o.createContext({}),c=function(e){var r=o.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},f=function(e){var r=c(e.components);return o.createElement(l.Provider,{value:r},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},d=o.forwardRef((function(e,r){var n=e.components,t=e.mdxType,i=e.originalType,l=e.parentName,f=p(e,["components","mdxType","originalType","parentName"]),u=c(n),d=t,m=u["".concat(l,".").concat(d)]||u[d]||s[d]||i;return n?o.createElement(m,a(a({ref:r},f),{},{components:n})):o.createElement(m,a({ref:r},f))}));function m(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=n.length,a=new Array(i);a[0]=d;var p={};for(var l in r)hasOwnProperty.call(r,l)&&(p[l]=r[l]);p.originalType=e,p[u]="string"==typeof e?e:t,a[1]=p;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},30837:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var o=n(87462),t=(n(67294),n(3905));const i={title:"Program for Addition of Polynomial in CPP",slug:"/program-for-addition-of-polynomial-in-cpp/",date:new Date("2020-08-16T12:11:00.000Z"),authors:"kaustubh"},a=void 0,p={permalink:"/blog/program-for-addition-of-polynomial-in-cpp/",source:"@site/blog/2020-08-16-program-for-addition-of-polynomial-in-cpp.md",title:"Program for Addition of Polynomial in CPP",description:"",date:"2020-08-16T12:11:00.000Z",formattedDate:"August 16, 2020",tags:[],readingTime:.56,hasTruncateMarker:!1,authors:[{name:"Kaustubh Kulkarni",title:"ServiceNow Developer",url:"https://github.com/kaustubhk24",imageURL:"https://www.gravatar.com/avatar/b76fcfc82fc2e8fdc8075636f1735f61?s=200",key:"kaustubh"}],frontMatter:{title:"Program for Addition of Polynomial in CPP",slug:"/program-for-addition-of-polynomial-in-cpp/",date:"2020-08-16T12:11:00.000Z",authors:"kaustubh"},prevItem:{title:"Program for Sparse Matrix in CPP",permalink:"/blog/program-for-sparse-matrix-in-cpp/"},nextItem:{title:"Program for Bubble Sort in CPP",permalink:"/blog/program-for-bubble-sort-in-cpp/"}},l={authorsImageUrls:[void 0]},c=[],f={toc:c},u="wrapper";function s(e){let{components:r,...n}=e;return(0,t.kt)(u,(0,o.Z)({},f,n,{components:r,mdxType:"MDXLayout"}),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Polynomial.cpp"',title:'"Polynomial.cpp"'},'#include<iostream>\nusing namespace std;\nclass poly \n{\n    int order;\n    int coeff[10];\n  public:\n        void polycreate()\n        {\n        int i;\n        for(i=0; i<10; i++)       \n        coeff[i]=0;\n        cout<<"Highest Order for Polynomial:";\n        cin>>order;\n        cout<<"Enter The variables:";\n            for(i=order; i>-1; i--)\n            {\n                cin>>coeff[i];\n            }\n        }\n        void poly3_order(poly f,poly s)\n        {\n        if(f.order==s.order)                            \n            order=f.order;\n        else\n            if(f.order>s.order) \n                order=f.order;\n                else  if(s.order>f.order)          \n                    order=s.order;\n        }\n        void polyadd(poly fp,poly sp)\n        {\n        int i;\n            for(i=order; i>-1; i--)\n                coeff[i]=fp.coeff[i]+sp.coeff[i];\n        }\n        void polydisplay()\n        {\n            int i;\n            for(i=order; i>-1; i--)\n            {\n                if(i==order)\n                    cout<<coeff[i]<<"x^"<<i<<" ";\n                else\n                    { \n                        if(coeff[i]>=0) cout<<"+";\n                        cout<<coeff[i]<<"x^"<<i<<" ";\n                    }\n            } \n            cout<<endl;\n        }\n};\n      \nint main()\n{\n    poly p1,p2,p3;\n    p1.polycreate();\n    p2.polycreate();\n    p3.poly3_order(p1,p2);\n    p3.polyadd(p1,p2);\n    cout<<"First Polynomial: "; \n    p1.polydisplay();\n    cout<<"Second Polynomial: ";\n    p2.polydisplay();\n    cout<<"Third Polynomial: ";                                       \n    p3.polydisplay();\n    return 0;\n}\n\n')))}s.isMDXComponent=!0}}]);