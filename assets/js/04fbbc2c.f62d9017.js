"use strict";(self.webpackChunkkaustubh=self.webpackChunkkaustubh||[]).push([[41527],{3905:(r,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>g});var t=n(67294);function a(r,e,n){return e in r?Object.defineProperty(r,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):r[e]=n,r}function o(r,e){var n=Object.keys(r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(r);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.push.apply(n,t)}return n}function i(r){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(r,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(n,e))}))}return r}function l(r,e){if(null==r)return{};var n,t,a=function(r,e){if(null==r)return{};var n,t,a={},o=Object.keys(r);for(t=0;t<o.length;t++)n=o[t],e.indexOf(n)>=0||(a[n]=r[n]);return a}(r,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(r);for(t=0;t<o.length;t++)n=o[t],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(r,n)&&(a[n]=r[n])}return a}var c=t.createContext({}),p=function(r){var e=t.useContext(c),n=e;return r&&(n="function"==typeof r?r(e):i(i({},e),r)),n},u=function(r){var e=p(r.components);return t.createElement(c.Provider,{value:e},r.children)},m="mdxType",s={inlineCode:"code",wrapper:function(r){var e=r.children;return t.createElement(t.Fragment,{},e)}},f=t.forwardRef((function(r,e){var n=r.components,a=r.mdxType,o=r.originalType,c=r.parentName,u=l(r,["components","mdxType","originalType","parentName"]),m=p(n),f=a,g=m["".concat(c,".").concat(f)]||m[f]||s[f]||o;return n?t.createElement(g,i(i({ref:e},u),{},{components:n})):t.createElement(g,i({ref:e},u))}));function g(r,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof r||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=r,l[m]="string"==typeof r?r:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},39599:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var t=n(87462),a=(n(67294),n(3905));const o={title:"Program for Merge Sort in CPP",date:new Date("2020-08-16T12:06:00.000Z"),authors:"kaustubh",slug:"/program-for-merge-sort-in-cpp/"},i=void 0,l={permalink:"/blog/program-for-merge-sort-in-cpp/",source:"@site/blog/2020-08-16-program-for-merge-sort-in-cpp.md",title:"Program for Merge Sort in CPP",description:"",date:"2020-08-16T12:06:00.000Z",formattedDate:"August 16, 2020",tags:[],readingTime:1.105,hasTruncateMarker:!1,authors:[{name:"Kaustubh Kulkarni",title:"ServiceNow Developer",url:"https://github.com/kaustubhk24",imageURL:"https://www.gravatar.com/avatar/b76fcfc82fc2e8fdc8075636f1735f61?s=200",key:"kaustubh"}],frontMatter:{title:"Program for Merge Sort in CPP",date:"2020-08-16T12:06:00.000Z",authors:"kaustubh",slug:"/program-for-merge-sort-in-cpp/"},prevItem:{title:"Program for Quick Sort in CPP",permalink:"/blog/program-for-quick-sort-in-cpp/"},nextItem:{title:"Program to Convert Lowercase to Uppercase in CPP",permalink:"/blog/program-to-convert-lowercase-to-uppercase-in-cpp/"}},c={authorsImageUrls:[void 0]},p=[],u={toc:p},m="wrapper";function s(r){let{components:e,...n}=r;return(0,a.kt)(m,(0,t.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="merge.cpp"',title:'"merge.cpp"'},'#include<iostream>\nusing namespace std;\nvoid swapping(int &a, int &b) \n{ \n\n   int temp;\n   temp = a;\n   a = b;\n   b = temp;\n}\nvoid display(int *array, int size) {\n   for(int i = 0; i<size; i++)\n      cout <&lt array[i] << " ";\n   cout << endl;\n}\nvoid merge(int *array, int l, int m, int r) {\n   int i, j, k, nl, nr;\n  \n   nl = m-l+1; nr = r-m;\n   int larr[nl], rarr[nr];\n \n   for(i = 0; i<nl; i++)\n      larr[i] = array[l+i];\n   for(j = 0; j<nr; j++)\n      rarr[j] = array[m+1+j];\n   i = 0; j = 0; k = l;\n   \n   while(i < nl && j<nr) {\n      if(larr[i] <= rarr[j]) {\n         array[k] = larr[i];\n         i++;\n      }else{\n         array[k] = rarr[j];\n         j++;\n      }\n      k++;\n   }\n   while(i<nl) {      \n      array[k] = larr[i];\n      i++; k++;\n   }\n   while(j<nr) {     \n      array[k] = rarr[j];\n      j++; k++;\n   }\n}\nvoid mergeSort(int *array, int l, int r) {\n   int m;\n   if(l < r) {\n      int m = l+(r-l)/2;\n    \n      mergeSort(array, l, m);\n      mergeSort(array, m+1, r);\n      merge(array, l, m, r);\n   }\n}\nint main() {\n   int n;\n   cout << "Enter the number of elements: ";\n   cin >> n;\n   int arr[n];     \n   cout << "Enter elements:" << endl;\n   for(int i = 0; i<n; i++) {\n      cin >> arr[i];\n   }\n   cout << "Array before Sorting: ";\n   display(arr, n);\n   mergeSort(arr, 0, n-1);    \n   cout << "Array after Sorting: ";\n   display(arr, n);\n}\n\n\n')))}s.isMDXComponent=!0}}]);