"use strict";(self.webpackChunkkaustubh=self.webpackChunkkaustubh||[]).push([[99034],{3905:(r,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var e=t(67294);function i(r,n,t){return n in r?Object.defineProperty(r,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):r[n]=t,r}function o(r,n){var t=Object.keys(r);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(r);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(r,n).enumerable}))),t.push.apply(t,e)}return t}function a(r){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(r,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(r,n,Object.getOwnPropertyDescriptor(t,n))}))}return r}function c(r,n){if(null==r)return{};var t,e,i=function(r,n){if(null==r)return{};var t,e,i={},o=Object.keys(r);for(e=0;e<o.length;e++)t=o[e],n.indexOf(t)>=0||(i[t]=r[t]);return i}(r,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(r);for(e=0;e<o.length;e++)t=o[e],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(r,t)&&(i[t]=r[t])}return i}var p=e.createContext({}),u=function(r){var n=e.useContext(p),t=n;return r&&(t="function"==typeof r?r(n):a(a({},n),r)),t},l=function(r){var n=u(r.components);return e.createElement(p.Provider,{value:n},r.children)},s="mdxType",f={inlineCode:"code",wrapper:function(r){var n=r.children;return e.createElement(e.Fragment,{},n)}},m=e.forwardRef((function(r,n){var t=r.components,i=r.mdxType,o=r.originalType,p=r.parentName,l=c(r,["components","mdxType","originalType","parentName"]),s=u(t),m=i,g=s["".concat(p,".").concat(m)]||s[m]||f[m]||o;return t?e.createElement(g,a(a({ref:n},l),{},{components:t})):e.createElement(g,a({ref:n},l))}));function g(r,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof r||i){var o=t.length,a=new Array(o);a[0]=m;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=r,c[s]="string"==typeof r?r:i,a[1]=c;for(var u=2;u<o;u++)a[u]=t[u];return e.createElement.apply(null,a)}return e.createElement.apply(null,t)}m.displayName="MDXCreateElement"},41933:(r,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var e=t(87462),i=(t(67294),t(3905));const o={title:"Program for Quick Sort in CPP",date:new Date("2020-08-16T12:07:00.000Z"),authors:"kaustubh",slug:"/program-for-quick-sort-in-cpp/"},a=void 0,c={permalink:"/blog/program-for-quick-sort-in-cpp/",source:"@site/blog/2020-08-16-program-for-quick-sort-in-cpp.md",title:"Program for Quick Sort in CPP",description:"",date:"2020-08-16T12:07:00.000Z",formattedDate:"August 16, 2020",tags:[],readingTime:.835,hasTruncateMarker:!1,authors:[{name:"Kaustubh Kulkarni",title:"ServiceNow Developer",url:"https://github.com/kaustubhk24",imageURL:"https://www.gravatar.com/avatar/b76fcfc82fc2e8fdc8075636f1735f61?s=200",key:"kaustubh"}],frontMatter:{title:"Program for Quick Sort in CPP",date:"2020-08-16T12:07:00.000Z",authors:"kaustubh",slug:"/program-for-quick-sort-in-cpp/"},prevItem:{title:"Program for Bubble Sort in CPP",permalink:"/blog/program-for-bubble-sort-in-cpp/"},nextItem:{title:"Program for Merge Sort in CPP",permalink:"/blog/program-for-merge-sort-in-cpp/"}},p={authorsImageUrls:[void 0]},u=[],l={toc:u},s="wrapper";function f(r){let{components:n,...t}=r;return(0,i.kt)(s,(0,e.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Quick.cpp"',title:'"Quick.cpp"'},'#include <iostream> \nusing namespace std; \nvoid swap(int* a, int* b) \n{ \n    int t = *a; \n    *a = *b; \n    *b = t; \n} \n\nint partition (int arr[], int low, int high) \n{ \n    int pivot = arr[high]; \n    int i = (low - 1); \n\n    for (int j = low; j <= high - 1; j++) \n    { \n    \n        if (arr[j] < pivot) \n        { \n            i++; \n            swap(&arr[i], &arr[j]); \n        } \n    } \n    swap(&arr[i + 1], &arr[high]); \n    return (i + 1); \n} \n\n\nvoid quickSort(int arr[], int low, int high) \n{ \n    if (low < high) \n    { \n\n        int pi = partition(arr, low, high); \n\n    \n        quickSort(arr, low, pi - 1); \n        quickSort(arr, pi + 1, high); \n    } \n} \n\n\nvoid printArray(int arr[], int size) \n{ \n    int i; \n    for (i = 0; i < size; i++) \n        cout << arr[i] << " "; \n    cout << endl; \n} \n\nint main() \n{ \n    int n;\n    cout<<"How many elements :";\n    cin>>n;\n    cout<<"Enter elements :";\n    int arr[n];\n    for(int i=0;i<n;i++)\n    {\n        cin>>arr[i];\n    }\n    quickSort(arr, 0, n - 1); \n    cout << "Sorted array: n"; \n    printArray(arr, n); \n    return 0; \n} \n\n')))}f.isMDXComponent=!0}}]);