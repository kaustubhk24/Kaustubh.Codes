"use strict";(self.webpackChunkkaustubh=self.webpackChunkkaustubh||[]).push([[22172],{3905:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>g});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=t.createContext({}),u=function(e){var r=t.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},l=function(e){var r=u(e.components);return t.createElement(p.Provider,{value:r},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=u(n),f=a,g=m["".concat(p,".").concat(f)]||m[f]||s[f]||o;return n?t.createElement(g,i(i({ref:r},l),{},{components:n})):t.createElement(g,i({ref:r},l))}));function g(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var c={};for(var p in r)hasOwnProperty.call(r,p)&&(c[p]=r[p]);c.originalType=e,c[m]="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},59418:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var t=n(87462),a=(n(67294),n(3905));const o={title:"Program for Binary Search in CPP",slug:"/program-for-binary-search-in-cpp/",date:new Date("2020-08-16T11:42:00.000Z"),authors:"kaustubh"},i=void 0,c={permalink:"/blog/program-for-binary-search-in-cpp/",source:"@site/blog/2020-08-16-program-for-binary-search-in-cpp.md",title:"Program for Binary Search in CPP",description:"",date:"2020-08-16T11:42:00.000Z",formattedDate:"August 16, 2020",tags:[],readingTime:.315,hasTruncateMarker:!1,authors:[{name:"Kaustubh Kulkarni",title:"ServiceNow Developer",url:"https://github.com/kaustubhk24",imageURL:"https://www.gravatar.com/avatar/b76fcfc82fc2e8fdc8075636f1735f61?s=200",key:"kaustubh"}],frontMatter:{title:"Program for Binary Search in CPP",slug:"/program-for-binary-search-in-cpp/",date:"2020-08-16T11:42:00.000Z",authors:"kaustubh"},prevItem:{title:"Program to create * pattern in CPP",permalink:"/blog/program-to-create-pattern-in-cpp/"},nextItem:{title:"Program to Perform Linear Search on Array",permalink:"/blog/program-to-perform-linear-search-on-array/"}},p={authorsImageUrls:[void 0]},u=[],l={toc:u},m="wrapper";function s(e){let{components:r,...n}=e;return(0,a.kt)(m,(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Binary.cpp"',title:'"Binary.cpp"'},'#include<iostream>\nusing namespace std;\nint main()\n{\n    int a,n,num,i,mid,beg,end;\n    cout<<"Enter size of array :";\n    cin>>n;\n    int arr[n];\n    cout<<"Enter array elements :";\n    for(i=0;i<n;i++)\n    {\n        cin>>arr[i];\n    }\n    cout<<"Enter element to search :";\n    cin>>num;\n    end=n-1;\n    mid=(beg+end)/2;\n    while(beg<=end)\n    {\n        if(arr[mid]<num)\n        {\n            beg=mid+1;\n        }\n        else if(arr[mid]==num)\n        {\n            cout<<num<<" found at "<<mid+1;\n            break;\n        }\n        else\n        {\n            end=mid-1;\n        }\n        mid=(beg+end)/2;\n    }\n    if(beg>end)\n    {\n        cout<<"Not found";\n    }\n}\n\n\n')))}s.isMDXComponent=!0}}]);