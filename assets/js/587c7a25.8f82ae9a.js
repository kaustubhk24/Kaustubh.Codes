"use strict";(self.webpackChunkkaustubh=self.webpackChunkkaustubh||[]).push([[29818],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=r.createContext({}),u=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},p=function(t){var e=u(t.components);return r.createElement(c.Provider,{value:e},t.children)},l="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),l=u(n),d=a,g=l["".concat(c,".").concat(d)]||l[d]||m[d]||o;return n?r.createElement(g,s(s({ref:e},p),{},{components:n})):r.createElement(g,s({ref:e},p))}));function g(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[l]="string"==typeof t?t:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48645:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={title:"Write a program to perform CRUD operations using JDBC. Program 2",date:new Date("2020-10-08T05:39:00.000Z"),authors:"kaustubh",slug:"/write-a-program-to-perform-crud-operations-using-jdbc-program-2/"},s=void 0,i={permalink:"/blog/write-a-program-to-perform-crud-operations-using-jdbc-program-2/",source:"@site/blog/2020-10-08-write-a-program-to-perform-crud-operations-using-jdbc-program-2.md",title:"Write a program to perform CRUD operations using JDBC. Program 2",description:"Output:",date:"2020-10-08T05:39:00.000Z",formattedDate:"October 8, 2020",tags:[],readingTime:1.86,hasTruncateMarker:!1,authors:[{name:"Kaustubh Kulkarni",title:"ServiceNow Developer",url:"https://github.com/kaustubhk24",imageURL:"https://www.gravatar.com/avatar/b76fcfc82fc2e8fdc8075636f1735f61?s=200",key:"kaustubh"}],frontMatter:{title:"Write a program to perform CRUD operations using JDBC. Program 2",date:"2020-10-08T05:39:00.000Z",authors:"kaustubh",slug:"/write-a-program-to-perform-crud-operations-using-jdbc-program-2/"},prevItem:{title:"How to Install FREE EasyAppointements on CPanel in 5 minutes?",permalink:"/blog/how-to-install-free-easyappointements-on-cpanel/"},nextItem:{title:"Write a program to perform CRUD operations using JDBC.",permalink:"/blog/write-a-program-to-perform-crud-operations-using-jdbc/"}},c={authorsImageUrls:[void 0]},u=[],p={toc:u},l="wrapper";function m(t){let{components:e,...n}=t;return(0,a.kt)(l,(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="assign.java"',title:'"assign.java"'},'/**  \n* Q 1) Write a program to perform CRUD operations using JDBC.  \n*/  \nimport java.sql.Connection;  \nimport java.sql.DriverManager;  \nimport java.sql.*;  \npublic class assign {  \npublic static void main(String[] args) {  \nConnection con = null;  \ntry {  \n/**  \n* Need to execute first export  \n* CLASSPATH=$CLASSPATH:mysql-connector-java-8.0.21.jar  \n*/  \ncon = DriverManager.getConnection("jdbc:mysql://localhost:3306/kaustubh?useSSL=false",  \n"kaustubh",  \n"kaustubh");  \n// connection TEST  \nSystem.out.println("Connection is successful !!!!!");  \n//Create table if does not exists  \nString CREATE_TABLE_SQL="CREATE TABLE IF NOT EXISTS kaustubh.student ("  \n+ "id INT,"  \n+ "sname VARCHAR(30), "  \n+ "sclass VARCHAR(30),"  \n+ "PRIMARY KEY (id))";  \n  \n//end create table if does not exists  \nStatement stmt = con.createStatement();  \nstmt.executeUpdate(CREATE_TABLE_SQL);  \nSystem.out.println("Table created");  \n  \ninsert(con,1,"Kaustubh","MCA II");  \ninsert(con,2,"Angad","MCA II");  \ninsert(con,3,"Sagar","MCA III");  \ninsert(con,4,"Rajesh","MCA II");  \n  \n// insert operation  \nshowData(con);  \n  \n// end insert  \n  \n// Start UPDATE Statement [UPDATE OPERATION]  \nupdateData(con);  \nshowData(con);  \n// END UPDATE Statement [UPDATE OPERATION]  \n// DELETE OPERATION  \ndelete(con);  \nshowData(con);  \n// END DELETE  \nstmt.executeUpdate("DELETE from student");  \nSystem.out.println("Student Table DROPPED");  \n  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \n}  \nstatic void insert(Connection con,Integer sid,String name, String ssclass){  \ntry {  \nString sql = "INSERT INTO student (id, sname, sclass) VALUES (?, ?, ?)";  \nPreparedStatement statement = con.prepareStatement(sql);  \nstatement.setInt(1, sid);  \nstatement.setString(2, name);  \nstatement.setString(3, ssclass);  \nint rowsInserted = statement.executeUpdate();  \nif (rowsInserted > 0) {  \nSystem.out.println("A new student was inserted successfully!");  \n}  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \n}  \nstatic void showData(Connection con) {  \ntry {  \nString selectSql = "SELECT * FROM student";  \nStatement selectStatement = con.createStatement();  \n  \nResultSet result = selectStatement.executeQuery(selectSql);  \nint count = 0;  \nwhile (result.next()) {  \nString id = result.getString("id");  \nString sname = result.getString("sname");  \nString sclass = result.getString("sclass");  \nString output = "Student #%d: %s - %s - %s";  \nSystem.out.println(String.format(output, ++count, id, sname, sclass));  \n}  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \n}  \nstatic void updateData(Connection con) {  \ntry {  \nString updateSql = "UPDATE student SET sclass=? WHERE id=?";  \nPreparedStatement updateStatement = con.prepareStatement(updateSql);  \nupdateStatement.setString(1, "MCA I");  \nupdateStatement.setInt(2, 4);  \nint rowsUpdated = updateStatement.executeUpdate();  \nif (rowsUpdated > 0) {  \nSystem.out.println("An existing student was updated successfully!");  \n}  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \n}  \n  \nstatic void delete(Connection con)  \n{  \ntry {  \nString deleteSql = "DELETE FROM student WHERE id=?";  \nPreparedStatement deletestatement = con.prepareStatement(deleteSql);  \ndeletestatement.setInt(1, 4);  \nint rowsDeleted = deletestatement.executeUpdate();  \nif (rowsDeleted > 0) {  \nSystem.out.println("A Student was deleted successfully!");  \n}  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \n}  \n  \n}\n')),(0,a.kt)("p",null,"Output:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://kaustubhk24.netlify.app/imgs/wp-content/uploads/2020/10/Screenshot-2Bfrom-2B2020-10-08-2B11-11-57.png",alt:null})))}m.isMDXComponent=!0}}]);