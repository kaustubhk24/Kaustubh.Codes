"use strict";(self.webpackChunkkaustubh=self.webpackChunkkaustubh||[]).push([[47746],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>S});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,S=p["".concat(c,".").concat(m)]||p[m]||d[m]||s;return n?r.createElement(S,o(o({ref:t},l),{},{components:n})):r.createElement(S,o({ref:t},l))}));function S(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79120:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const s={title:"Write a program to perform CRUD operations using JDBC.",date:new Date("2020-10-08T05:35:00.000Z"),authors:"kaustubh",slug:"/write-a-program-to-perform-crud-operations-using-jdbc/"},o=void 0,i={permalink:"/blog/write-a-program-to-perform-crud-operations-using-jdbc/",source:"@site/blog/2020-10-08-write-a-program-to-perform-crud-operations-using-jdbc.md",title:"Write a program to perform CRUD operations using JDBC.",description:"/",date:"2020-10-08T05:35:00.000Z",formattedDate:"October 8, 2020",tags:[],readingTime:4.275,hasTruncateMarker:!1,authors:[{name:"Kaustubh Kulkarni",title:"ServiceNow Developer",url:"https://github.com/kaustubhk24",imageURL:"https://www.gravatar.com/avatar/b76fcfc82fc2e8fdc8075636f1735f61?s=200",key:"kaustubh"}],frontMatter:{title:"Write a program to perform CRUD operations using JDBC.",date:"2020-10-08T05:35:00.000Z",authors:"kaustubh",slug:"/write-a-program-to-perform-crud-operations-using-jdbc/"},prevItem:{title:"Write a program to perform CRUD operations using JDBC. Program 2",permalink:"/blog/write-a-program-to-perform-crud-operations-using-jdbc-program-2/"},nextItem:{title:"How to Create an AWS Ubuntu Instance in 5 minutes?",permalink:"/blog/how-to-create-an-aws-ubuntu-instance-in-5-minutes/"}},c={authorsImageUrls:[void 0]},u=[],l={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"/**"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Q ) Write a program to perform CRUD operations using JDBC.")),(0,a.kt)("p",null,"*/"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="assign2.java"',title:'"assign2.java"'},'import java.sql.*;  \nimport java.util.Scanner;  \npublic class assign2 {  \n  \npublic static void main(String[] args) {  \nConnection con = null;  \nScanner sc = new Scanner(System.in);  \ntry {  \n/**  \n* Need to execute first export CLASSPATH=$CLASSPATH:mysql-connector-java-8.0.21.jar  \n*/  \ncon = DriverManager.getConnection("jdbc:mysql://localhost:3306/kaustubh?  \nallowPublicKeyRetrieval=true&useSSL=false", "kaustubh",  \n"kaustubh");  \n// connection TEST  \nSystem.out.println("Connection is successful !!!!!");  \n// Create table if does not exists  \nString CREATE_TABLE_SQL = "CREATE TABLE IF NOT EXISTS kaustubh.student (" + "id INT,"  \n+ "sname VARCHAR(30), " + "sclass VARCHAR(30)," + "PRIMARY KEY (id))";  \n// end create table if does not exists  \nStatement stmt = con.createStatement();  \nstmt.executeUpdate(CREATE_TABLE_SQL);  \nSystem.out.println("Table created");  \n// Some initial fixed insertion queries  \ninsert(con, 1, "Kaustubh", "MCA II");  \ninsert(con, 2, "Angad", "MCA II");  \ninsert(con, 3, "Sagar", "MCA III");  \ninsert(con, 4, "Rajesh", "MCA II");  \n// Some initial fixed insertion queries  \nselection(con, sc, stmt);  \n  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \n}  \nstatic void selection(Connection con, Scanner sc, Statement stmt) {  \nSystem.out  \n.println("Select Operation to Perform :n1.Insertn2.Updaten3.Deleten4.Selectn5.Drop Table  \nn6.Exit");  \nint choice = sc.nextInt();  \nswitch (choice) {  \ncase 1:  \nSystem.out.println("Enter Student id ,Student Name & Student Class");  \nint id=sc.nextInt();  \nsc.nextLine();  \nString sname=sc.nextLine();  \nString sclass=sc.nextLine();  \ninsert(con, id, sname, sclass);  \nselection(con, sc, stmt);  \nbreak;  \ncase 2:  \nSystem.out.println("Enter ID to Update & new Class");  \nint sid=sc.nextInt();  \nsc.nextLine();  \nString ssclass=sc.nextLine();  \nupdateData(con, sid, ssclass);  \nselection(con, sc, stmt);  \nbreak;  \n  \ncase 3:  \nSystem.out.println("Enter ID to Delete");  \ndelete(con, sc.nextInt());  \nselection(con, sc, stmt);  \nbreak;  \n  \ncase 4:  \nshowData(con);  \nselection(con, sc, stmt);  \nbreak;  \n  \ncase 5:  \ntry {  \n  \nstmt.executeUpdate("DELETE from student");  \nSystem.out.println("Student Table DROPPED . Program needs to restart to fire initial queries");  \nsc.close();  \ncon.close();  \n} catch (SQLException e) {  \ne.printStackTrace();  \n}  \nbreak;  \n  \ncase 6: System.exit(0);  \nbreak;  \n  \ndefault:System.out.println("The option you selected was invalidnPlease try again?");  \nselection(con, sc,stmt);  \nbreak;  \n  \n}  \n  \n}  \nstatic void insert(Connection con,Integer sid,String name, String ssclass){  \ntry {  \nString sql = "INSERT INTO student (id, sname, sclass) VALUES (?, ?, ?)";  \nPreparedStatement statement = con.prepareStatement(sql);  \nstatement.setInt(1, sid);  \nstatement.setString(2, name);  \nstatement.setString(3, ssclass);  \nint rowsInserted = statement.executeUpdate();  \nif (rowsInserted > 0) {  \nSystem.out.println("A new student was inserted successfully!");  \n}  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \n}  \nstatic void showData(Connection con) {  \ntry {  \nString selectSql = "SELECT * FROM student";  \n  \nStatement selectStatement = con.createStatement();  \nResultSet result = selectStatement.executeQuery(selectSql);  \nint count = 0;  \nwhile (result.next()) {  \nString id = result.getString("id");  \nString sname = result.getString("sname");  \nString sclass = result.getString("sclass");  \nString output = "Student #%d: %s - %s - %s";  \nSystem.out.println(String.format(output, ++count, id, sname, sclass));  \n}  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \n}  \nstatic void updateData(Connection con,Integer id,String sclass) {  \ntry {  \nString updateSql = "UPDATE student SET sclass=? WHERE id=?";  \nPreparedStatement updateStatement = con.prepareStatement(updateSql);  \nupdateStatement.setString(1, "MCA I");  \nupdateStatement.setInt(2, 4);  \nint rowsUpdated = updateStatement.executeUpdate();  \nif (rowsUpdated > 0) {  \nSystem.out.println("An existing student was updated successfully!");  \n}  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \n}  \n  \nstatic void delete(Connection con,Integer sid)  \n{  \ntry {  \nString deleteSql = "DELETE FROM student WHERE id=?";  \nPreparedStatement deletestatement = con.prepareStatement(deleteSql);  \ndeletestatement.setInt(1, sid);  \nint rowsDeleted = deletestatement.executeUpdate();  \nif (rowsDeleted > 0) {  \nSystem.out.println("A Student was deleted successfully!");  \n}  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \n}  \n  \n}  \n\n')),(0,a.kt)("p",null,"Output "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kaustubh@kaustubh-Lenovo-G50-80:/media/kaustubh/A/Practicals/  \npracticals/MCA/SEM III/JAVA/Practicals/assignment no7$ javac  \nassign2.java  \nkaustubh@kaustubh-Lenovo-G50-80:/media/kaustubh/A/Practicals/  \npracticals/MCA/SEM III/JAVA/Practicals/assignment no7$ java  \nassign2  \nConnection is successful !!!!!  \nTable created  \nA new student was inserted successfully!  \nA new student was inserted successfully!  \nA new student was inserted successfully!  \nA new student was inserted successfully!  \nSelect Operation to Perform :  \n1.Insert  \n2.Update  \n3.Delete  \n4.Select  \n5.Drop Table  \n6.Exit  \n4  \nStudent #1: 1 - Kaustubh - MCA II  \nStudent #2: 2 - Angad - MCA II  \nStudent #3: 3 - Sagar - MCA III  \nStudent #4: 4 - Rajesh - MCA II  \nSelect Operation to Perform :  \n1.Insert  \n2.Update  \n3.Delete  \n4.Select  \n5.Drop Table  \n6.Exit  \n1  \nEnter Student id ,Student Name & Student Class  \n5  \nManoj  \nMCA III  \nA new student was inserted successfully!  \nSelect Operation to Perform :  \n1.Insert  \n2.Update  \n3.Delete  \n4.Select  \n5.Drop Table  \n6.Exit  \n4  \nStudent #1: 1 - Kaustubh - MCA II  \nStudent #2: 2 - Angad - MCA II  \nStudent #3: 3 - Sagar - MCA III  \nStudent #4: 4 - Rajesh - MCA II  \n  \nStudent #5: 5 - Manoj - MCA III  \nSelect Operation to Perform :  \n1.Insert  \n2.Update  \n3.Delete  \n4.Select  \n5.Drop Table  \n6.Exit  \n2  \nEnter ID to Update & new Class  \n5  \nMCAII  \nAn existing student was updated successfully!  \nSelect Operation to Perform :  \n1.Insert  \n2.Update  \n3.Delete  \n4.Select  \n5.Drop Table  \n6.Exit  \n4  \nStudent #1: 1 - Kaustubh - MCA II  \nStudent #2: 2 - Angad - MCA II  \nStudent #3: 3 - Sagar - MCA III  \nStudent #4: 4 - Rajesh - MCA I  \nStudent #5: 5 - Manoj - MCA III  \nSelect Operation to Perform :  \n1.Insert  \n2.Update  \n3.Delete  \n4.Select  \n5.Drop Table  \n6.Exit  \n3  \nEnter ID to Delete  \n5  \nA Student was deleted successfully!  \nSelect Operation to Perform :  \n1.Insert  \n2.Update  \n3.Delete  \n4.Select  \n5.Drop Table  \n6.Exit  \n4  \nStudent #1: 1 - Kaustubh - MCA II  \nStudent #2: 2 - Angad - MCA II  \nStudent #3: 3 - Sagar - MCA III  \nStudent #4: 4 - Rajesh - MCA I  \nSelect Operation to Perform :  \n1.Insert  \n2.Update  \n  \n3.Delete  \n4.Select  \n5.Drop Table  \n6.Exit  \n5  \nStudent Table DROPPED . Program needs to restart to fire initial  \nqueries  \n  \n\n")))}d.isMDXComponent=!0}}]);